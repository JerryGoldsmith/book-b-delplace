import { Injectable } from "@angular/core";
import { Subject } from 'rxjs/Subject';
import { HttpClient } from '@angular/common/http';
import firebase from 'firebase/app';
import "firebase/database";

@Injectable({
  providedIn: "root"
})

export class AService {

  // Menu Saumon

  // A ------------

  priceASubject = new Subject<any[]>() as any;
  private priceAs = [
    { isChecked: false, value: 0.50, label: "Sauce Soja" },
    { isChecked: false, value: 4.50, label: "Bière Chinoise" },
    { isChecked: false, value: 3.50, label: "Bière Japonaise" },
    { isChecked: false, value: 4.50, label: "Bière Française" },
    { isChecked: false, value: 5.00, label: "Bière Américaine" }
  ];

  emitPriceASubject() {
    this.priceASubject.next(this.priceAs.slice());
  }

  // initialisation firebase > part01-resto-home.component.ts
  savePriceAToFirebaseinServer() {
    this.httpClient
    .put('https://book-b-delplace-default-rtdb.europe-west1.firebasedatabase.app/priceA.json', this.priceAs)
    .subscribe(
      () => {
        console.log('Enregistrement terminé : savePriceAToFirebase');
      },
      (error) => {
        console.log('Erreur de sauvegarde !' + error);
      }
    );
  }

  // subscription firebase > addA.component.ts
  savePriceAFromFirebaseinServer() {
    this.httpClient
    .get<any[]>('https://book-b-delplace-default-rtdb.europe-west1.firebasedatabase.app/priceA.json')
    .subscribe(
      (response) => {
        console.log('Chargement terminé : savePriceAFromFirebase');
        this.priceAs = response;
        this.emitPriceASubject();
      },
      (error) => {
        console.log('Erreur de chargement !' + error);
      }
    );
  }

  // itemPriceA --------

  itemPriceASubject = new Subject<any[]>();
  private itemPriceAs = [ { value: 8.00 } ].slice();

  emitItemPriceASubject() {
    this.itemPriceASubject.next(this.itemPriceAs);
  }

  // initialisation firebase > part01-resto-home.component.ts
  saveItemPriceAToFirebaseinServer() {
    this.httpClient
    .put('https://book-b-delplace-default-rtdb.europe-west1.firebasedatabase.app/itemPriceA.json', this.itemPriceAs)
    .subscribe(
      () => {
        console.log('Enregistrement terminé : saveItemPriceAToFirebase');
      },
      (error) => {
        console.log('Erreur de sauvegarde !' + error);
      }
    );
  }

  // subscription firebase > addA.component.ts
  saveItemPriceAFromFirebaseinServer() {
    this.httpClient
    .get<any[]>('https://book-b-delplace-default-rtdb.europe-west1.firebasedatabase.app/itemPriceA.json')
    .subscribe(
      (response) => {
        console.log('Chargement terminé : saveItemPriceAFromFirebase');
        this.itemPriceAs = response;
        this.emitItemPriceASubject();
      },
      (error) => {
        console.log('Erreur de chargement !' + error);
      }
    );
  }

  // --------

  totalASubject = new Subject<any[]>();
  totalAs = [
    { name: 0 }
  ];

  emitTotalASubject() {
    this.totalASubject.next(this.totalAs.slice());
  }

  // initialisation firebase > part01-resto-home.component.ts
  saveTotalAToFirebaseinServer() {
    this.httpClient
    .put('https://book-b-delplace-default-rtdb.europe-west1.firebasedatabase.app/totalA.json', this.totalAs)
    .subscribe(
      () => {
        console.log('Enregistrement terminé : saveTotalAToFirebase');
      },
      (error) => {
        console.log('Erreur de sauvegarde !' + error);
      }
    );
  }

  // firebase query > addA.component.ts > addA.component.html (button)
  public saveTotalA(): void {
    let now: Date = new Date(); // timestamp
    var postsRef = firebase.database().ref('/totalA')
    var newPostRef = postsRef.push({ // timestamp - priceAs > isChecked
      timestamp: now.getTime(),
      name: this.priceAs.filter(x => x.isChecked).reduce((a, b) => a + b.value + 0, 0)
    });
    var postId = newPostRef.key; // Get the unique key generated by push()
    postsRef
    .orderByKey()
    .equalTo(postId)
    .on('value', (snapshot) => {
      var newPost =  snapshot.val() ? snapshot.val() : [];
      this.totalAs = newPost;

      // convert Object to Array
      let dataArray = [];
          const value = snapshot.forEach((childSnapshot): void => {
          dataArray[childSnapshot.key] = childSnapshot.val();
          // console.log(childSnapshot.key);
        });

        // console.log(value + postId);
        return value + postId;

    });
  }

  // firebase query > abcdefghijkl.component.ts > abcdefghijkl.component.html (button)
  public saveTotalDeleteA() {
    let now: Date = new Date();
    var postsRef = firebase.database().ref('/totalA')
    var newPostRef = postsRef.push({
      timestamp: now.getTime(),
      name: 0
    });
    var postId = newPostRef.key;
    postsRef
    .orderByKey()
    .equalTo(postId)
    .on('value', (snapshot) => {
      var newPost =  snapshot.val() ? snapshot.val() : [];
      this.totalAs = newPost;
      
      let dataArray = {};
          const value = snapshot.forEach((childSnapshot): void => {
          dataArray[childSnapshot.key] = childSnapshot.val();
          // console.log(childSnapshot.key);
        });
        console.log(value + postId);
        // return value + postId;
    });
  }

  // complete A --------

  totalCompleteASubject = new Subject<any[]>();
  totalCompleteAs = [
    { name: 0 }
  ];

  emitTotalCompleteASubject() {
    this.totalCompleteASubject.next(this.totalCompleteAs.slice());
  }

  // initialisation firebase > part01-resto-home.component.ts
  saveTotalCompleteAToFirebaseinServer() {
    this.httpClient
    .put('https://book-b-delplace-default-rtdb.europe-west1.firebasedatabase.app/totalCompleteA.json', this.totalCompleteAs)
    .subscribe(
      () => {
        console.log('Enregistrement terminé : saveTotalCompleteAToFirebase');
      },
      (error) => {
        console.log('Erreur de sauvegarde !' + error);
      }
    );
  }

  // firebase query > addA.component.ts > addA.component.html (button)
  public saveTotalCompleteA() {
    let now: Date = new Date();
    var postsRef = firebase.database().ref('/totalCompleteA')
    var newPostRef = postsRef.push({
      timestamp: now.getTime(),
      name:
      this.priceAs.filter(x => x.isChecked).reduce((a, b) => a + b.value + 0, 0)
      + this.itemPriceAs.filter(x => x).reduce((a, b) => a + b.value + 0, 0)
    });
    var postId = newPostRef.key;
    postsRef
    .orderByKey()
    .equalTo(postId)
    .on('value', (snapshot) => {
      var newPost =  snapshot.val() ? snapshot.val() : [];
      this.totalCompleteAs = newPost;

      let dataArray = {};
          const value = snapshot.forEach((childSnapshot): void => {
          dataArray[childSnapshot.key] = childSnapshot.val();
        });
        return value + postId;
    });
  }

  // firebase query > abcdefghijkl.component.ts > abcdefghijkl.component.html (button)
  public saveTotalCompleteDeleteA() {
    let now: Date = new Date();
    var postsRef = firebase.database().ref('/totalCompleteA')
    var newPostRef = postsRef.push({
      timestamp: now.getTime(),
      name: 0
    });
    var postId = newPostRef.key;
    postsRef
    .orderByKey()
    .equalTo(postId)
    .on('value', (snapshot) => {
      var newPost =  snapshot.val() ? snapshot.val() : [];
      this.totalCompleteAs = newPost;

      let dataArray = {};
          const value = snapshot.forEach((childSnapshot): void => {
          dataArray[childSnapshot.key] = childSnapshot.val();
        });
        return value + postId;
    });
  }

  // tva A --------

  totalTvaASubject = new Subject<any[]>();
  totalTvaAs = [
    { name: 0 }
  ];

  emitTotalTvaASubject() {
    this.totalTvaASubject.next(this.totalTvaAs.slice());
  }

  // initialisation firebase > part01-resto-home.component.ts
  saveTotalTvaAToFirebaseinServer() {
    this.httpClient
    .put('https://book-b-delplace-default-rtdb.europe-west1.firebasedatabase.app/totalTvaA.json', this.totalTvaAs)
    .subscribe(
      () => {
        console.log('Enregistrement terminé : saveTotalTvaAToFirebase');
      },
      (error) => {
        console.log('Erreur de sauvegarde !' + error);
      }
    );
  }

  // firebase query > addA.component.ts > addA.component.html (button)
  public saveTotalTvaA() {
    let now: Date = new Date();
    const TVA = 20.0;
    var postsRef = firebase.database().ref('/totalTvaA')
    var newPostRef = postsRef.push({
      timestamp: now.getTime(),
      name:
      this.priceAs.filter(x => x.isChecked).reduce((a, b) => a + b.value + 0, 0)
      * TVA / 100
      + this.itemPriceAs.filter(x => x).reduce((a, b) => a + b.value + 0, 0)
      * TVA / 100
    });
    var postId = newPostRef.key;
    postsRef
    .orderByKey()
    .equalTo(postId)
    .on('value', (snapshot) => {
      var newPost =  snapshot.val() ? snapshot.val() : [];
      this.totalTvaAs = newPost;

      let dataArray = {};
          const value = snapshot.forEach((childSnapshot): void => {
          dataArray[childSnapshot.key] = childSnapshot.val();
        });
        return value + postId;
    });
  }

  // firebase query > abcdefghijkl.component.ts > abcdefghijkl.component.html (button)
  public saveTotalTvaDeleteA() {
    let now: Date = new Date();
    var postsRef = firebase.database().ref('/totalTvaA')
    var newPostRef = postsRef.push({
      timestamp: now.getTime(),
      name: 0
    });
    var postId = newPostRef.key;
    postsRef
    .orderByKey()
    .equalTo(postId)
    .on('value', (snapshot) => {
      var newPost =  snapshot.val() ? snapshot.val() : [];
      this.totalTvaAs = newPost;

      let dataArray = {};
          const value = snapshot.forEach((childSnapshot): void => {
          dataArray[childSnapshot.key] = childSnapshot.val();
        });
        return value + postId;
    });
  }

  // ---------------------------------------------

  constructor(
    private httpClient: HttpClient
  ) {}
}
